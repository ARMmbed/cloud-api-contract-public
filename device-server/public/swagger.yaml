swagger: '2.0'
info:
  title: Connect API
  description: |-
    Pelion Device Management Connect API allows web applications to communicate with devices. You can subscribe to device resources and read values from and write values to them. Device Management Connect allows connectivity to devices by queueing requests and caching resource values.

    Pre-subscriptions and subscriptions are linked to the API key that you use to set the subscriptions. To retrieve, set and remove the subscriptions, you must use the same API key in the subsequent requests.

     See <a href="https://www.pelion.com/docs/device-management/current/service-api-references/troubleshooting-the-apis.html">Troubleshooting the APIs</a> for information on status and error codes.
  version: "2"
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
host: api.us-east-1.mbedcloud.com
tags:
  - name: Device data - requests
    description: Send an asynchronous request to a method (GET, POST, PUT, DELETE) on a device resource.
  - name: Device data - resources
    description: Manage resources on a device.
  - name: Device data - subscriptions
    description: Manage subscriptions to device resource changes.
x-aliases:
  successfully_deleted: &successfully_deleted
    description: Successfully deleted.
  unauthorized: &unauthorized
    description: Unauthorized.
  forbidden: &forbidden
    description: Forbidden. The authorization token used is not an API key.
paths:
  /v2/endpoints/{device-id}:
    get:
      summary: List the resources on an endpoint.
      description: |-
        Retrieves resources cached by Device Management Connect. This call does not formulate a message to the device.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v2/endpoints/{device-id} \
        -H 'Authorization: Bearer <api_key>'
        ```
      operationId: getEndpointResources
      produces:
        - application/json
      parameters:
        - name: device-id
          in: path
          description: |-
            A unique device ID for an endpoint. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
      tags:
        - Endpoints
      responses:
        200:
          description: Successful response with an array of resources.
          schema:
            $ref: '#/definitions/ResourceArray'
        404:
          description: Endpoint not found.
  /v2/endpoints/{device-id}/{resourcePath}:
    get:
      deprecated: true
      x-deprecation:
        issued_at: "2019-05-17T15:23:00+00:00"
        end_of_life_at: "2020-05-17T00:00:00+00:00"
        comment: /v2/endpoints/{device-id}/{resourcePath} is replaced by /v2/device-requests/{device-id}. The /v2/device-requests/{device-id} endpoint lets you use your own async-id, and simplifies integration by returning all resource values, cached and non-cached, through the event notification channel.
        links: ["https://www.pelion.com/docs/device-management-api/connect/"]
      summary: (DEPRECATED) Read from a resource.
      description: |-
        (DEPRECATED) Requests the resource value either from the device or cache. If the value is not in the cache, the request goes all the
        way to the device. When the response is available, an `AsyncIDResponse` JSON object is received in the notification channel.
        The resource values can also be in cache based on `max_age` defined by the device. The value found from the cache is returned
        immediately in the response.

        The preferred way to get resource values is to use the **subscribe** and **callback** methods.

        All resource APIs are asynchronous. These APIs only respond if the device is on and connected to Device Management.

        See also how [resource caching](https://www.pelion.com/docs/device-management/current/connecting/device-guidelines.html#resource-cache) works.

        Please see the [Lightweight Machine to Machine Technical specification](http://www.openmobilealliance.org/release/LightweightM2M/V1_0-20170208-A/OMA-TS-LightweightM2M-V1_0-20170208-A.pdf) for more information.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v2/endpoints/{device-id}/{resourcePath} \
        -H 'Authorization: Bearer <api_key>'
        ```
      operationId: getResourceValue
      parameters:
        - name: device-id
          in: path
          description: |-
            Unique Device Management device ID for the endpoint. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
        - name: resourcePath
          in: path
          description: |-
            The resource URL.
          required: true
          type: string
        - name: cacheOnly
          in: query
          description: |-
            If true, the response comes only from the cache. Default: false. Device Management Connect caches the received resource values for the time of [max_age](https://www.pelion.com/docs/device-management/current/resources/working-with-the-resources.html) defined in the client.
          required: false
          type: boolean
        - name: noResp
          in: query
          description: |-
            If a request is made with `noResp=true`, Device Management Connect makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive on the device, and no `async-response-id` returns.

            Successful calls return with the status code `204 No Content`. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code `409 Conflict`.
          required: false
          type: boolean
      tags:
        - Resources
      responses:
        200:
          description: Resource value found in cache. Returns the string value of the resource.
        202:
          description: Accepted. Returns an asynchronous response ID.
          schema:
            $ref: '#/definitions/AsyncID'
        205:
          description: No cache available for the resource.
        400:
          description: Bad request.
        404:
          description: Requested endpointâ€™s resource is not found.
        409:
          description: 'Conflict. If `noResp=true`, the non-confirmable request is not supported by the used protocol.'
        410:
          description: Gone. Endpoint not found.
        429:
          description: 'Cannot accept the request at the moment: the queue is full.'
        502:
          description: TCP or TLS connection to endpoint cannot be established.

    put:
      deprecated: true
      x-deprecation:
        issued_at: "2019-05-17T15:23:00+00:00"
        end_of_life_at: "2020-05-17T00:00:00+00:00"
        comment: /v2/endpoints/{device-id}/{resourcePath} is replaced by /v2/device-requests/{device-id}.
        links: ["https://www.pelion.com/docs/device-management-api/connect/"]
      summary: (DEPRECATED) Write to a Resource or use write-attributes (notification rules) for a Resource.
      description: |-
        (DEPRECATED) With this API, you can [write a new value to existing Resources](https://www.pelion.com/docs/device-management/current/resources/handle-resource-webapp.html) or use the **write** attribute to set [notification rules](https://www.pelion.com/docs/device-management/current/resources/resource-change-webapp.html) for the Resources. The notification rules only work on the device client side and may not be supported by all clients.

        This API can also be used to transfer files to the device. Device Management Connect LwM2M server implements Option 1 from RFC7959. The maximum block size is 1024 bytes.
        Note block size versus transferred file size in low-quality networks. The customer application needs to know what type of file is transferred (for example, TXT)
        and the customer can encrypt the payload. The maximum payload size is 1048576 bytes.

        All resource APIs are asynchronous. These APIs respond only if the device is on and connected to Device Management Connect, and there is an active notification channel.

        Supported content types depend on the device and its resource. Device Management translates HTTP to equivalent CoAP content type.

        **Example:**

        This example sets the alarm on a buzzer. The command writes the [Buzzer](http://www.openmobilealliance.org/tech/profiles/lwm2m/3338.xml) instance 0, "On/Off" boolean resource to '1'.

        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v2/endpoints/{device-id}/3338/0/5850 \
        -H "content-type: text/plain" \
        -H 'Authorization: Bearer <api_key>' \
        -d '1'
        ```
      operationId: updateResourceValue
      consumes:
        - text/plain
        - application/xml
        - application/octet-stream
        - application/exi
        - application/json
        - application/link-format
        - application/senml+json
        - application/nanoservice-tlv
        - application/vnd.oma.lwm2m+text
        - application/vnd.oma.lwm2m+opaq
        - application/vnd.oma.lwm2m+tlv
        - application/vnd.oma.lwm2m+json

      parameters:
        - name: device-id
          in: path
          description: |-
            A unique Device Management device ID for the endpoint. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
        - name: resourcePath
          in: path
          description: Resource URL.
          required: true
          type: string
        - name: resourceValue
          in: body
          description: |-
            The value to set to the resource.
          required: true
          schema:
            type: string
        - name: noResp
          in: query
          description: |-
            If you make a request with `noResp=true`, Device Management Connect makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive to the device, and do not return an `async_response_id`.

            When a call with this parameter enabled succeeds, it return status code `204 No Content`. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code `409 Conflict`.
          required: false
          type: boolean
      tags:
        - Resources
      responses:
        202:
          description: Accepted. Returns an asynchronous response ID.
          schema:
            $ref: '#/definitions/AsyncID'
        400:
          description: Bad request.
        409:
          description: |-
            'Conflict. If `noResp=true`, the non-confirmable request is not supported by the used protocol.'
        410:
          description: Gone. Endpoint not found.
        429:
          description: 'Cannot accept the request at the moment: the queue is full.'
        502:
          description: TCP or TLS connection to endpoint cannot be established.
    post:
      deprecated: true
      x-deprecation:
        issued_at: "2019-05-17T15:23:00+00:00"
        end_of_life_at: "2020-05-17T00:00:00+00:00"
        comment: /v2/endpoints/{device-id}/{resourcePath} is replaced by /v2/device-requests/{device-id}.
        links: ["https://www.pelion.com/docs/device-management-api/connect/"]
      summary: (DEPRECATED) Execute a function on a Resource or create new Object instance.
      description: |-
        (DEPRECATED) [Execute a function](https://www.pelion.com/docs/device-management/current/resources/handle-resource-webapp.html#the-execute-operation) on an existing resource and create a new Object instance on the device. The resource path does not have to exist; you can set it with the call. The maximum length of the resource path is 255 characters.

        All resource APIs are asynchronous. These APIs respond only if the device is on and connected to Device Management Connect, and there is an active notification channel.

        Supported content types depend on the device and its resource. Device Management translates HTTP to the equivalent CoAP content type.

        **Example:**

        This example resets the min and max values of the [temperature sensor](http://www.openmobilealliance.org/tech/profiles/lwm2m/3303.xml) instance 0 by executing Resource 5605 'Reset Min and Max Measured Values'.

        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v2/endpoints/{device-id}/3303/0/5605 \
        -H 'Authorization: Bearer <api_key>'
        ```
      operationId: executeOrCreateResource
      consumes:
        - text/plain
        - application/xml
        - application/octet-stream
        - application/exi
        - application/json
        - application/link-format
        - application/senml+json
        - application/nanoservice-tlv
        - application/vnd.oma.lwm2m+text
        - application/vnd.oma.lwm2m+opaq
        - application/vnd.oma.lwm2m+tlv
        - application/vnd.oma.lwm2m+json

      parameters:
        - name: device-id
          in: path
          description: |-
            A unique Device Management device ID for the endpoint. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
        - name: resourcePath
          in: path
          description: The resource URL.
          required: true
          type: string
        - name: resourceFunction
          in: body
          description: |-
            This value is not needed. Most of the time, resources do not accept a function; they have their own functions predefined. You can use this to trigger them. If a function is included, the body of this request is passed as a char* to the function in Device Management Client.
          required: false
          schema:
            type: string
        - name: noResp
          in: query
          description: |-
            If you make a request with `noResp=true`, Device Management Connect makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive in the device, and you do not get back an async-response-id.

            When calls with this parameter enabled succeed, they return with the status code `204 No Content`. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code `409 Conflict`.
          required: false
          type: boolean
      tags:
        - Resources
      responses:
        202:
          description: Accepted. Returns an asynchronous response ID.
          schema:
            $ref: '#/definitions/AsyncID'
        400:
          description: Bad request.
        404:
          description: Requested endpointâ€™s resource not found.
        409:
          description: 'Conflict. If `noResp=true`, the non-confirmable request is not supported by the used protocol.'
        410:
          description: Gone. Endpoint not found.
        429:
          description: 'Cannot accept the request at the moment: the queue is full.'
        502:
          description: TCP or TLS connection to endpoint cannot be established.
    delete:
      deprecated: true
      x-deprecation:
        issued_at: "2019-05-17T15:23:00+00:00"
        end_of_life_at: "2020-05-17T00:00:00+00:00"
        comment: /v2/endpoints/{device-id}/{resourcePath} is replaced by /v2/device-requests/{device-id}.
        links: ["https://www.pelion.com/docs/device-management-api/connect/"]
      summary: (DEPRECATED) Delete a resource path.
      description: |-
        (DEPRECATED) A request to delete a resource path must be handled by both Device Management Client and Device Management
        Connect.

        All resource APIs are asynchronous. These APIs respond only if the device is on and connected to Device Management Connect, and there is an active notification channel.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v2/endpoints/{device-id}/{resourcePath} \
        -H 'Authorization: Bearer <api_key>'
        ```
      operationId: deleteResourcePath
      parameters:
        - name: device-id
          in: path
          description: |-
            A unique Device Management device ID for the endpoint. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
        - name: resourcePath
          in: path
          description: |-
            The resource URL.
          required: true
          type: string
        - name: noResp
          in: query
          description: |-
            If you make a request with `noResp=true`, Device Management Connect makes a CoAP non-confirmable request to the device. Such requests are not guaranteed to arrive at the device, and do not return an async-response-id.

            When calls with this parameter enabled succeed, they return with the status code `204 No Content`. If the underlying protocol does not support non-confirmable requests, or if the endpoint is registered in queue mode, the response is status code `409 Conflict`.
          required: false
          type: boolean
      tags:
        - Resources
      responses:
        202:
          description: Accepted. Returns an asynchronous response ID.
          schema:
            $ref: '#/definitions/AsyncID'
        400:
          description: Bad request.
        404:
          description: Requested endpointâ€™s resource is not found.
        409:
          description: 'Conflict. If `noResp=true`, the non-confirmable request is not supported by the used protocol.'
        410:
          description: Gone. Endpoint not found.
        429:
          description: 'Cannot accept the request at the moment: the queue is full.'
        502:
          description: TCP or TLS connection to endpoint cannot be established.

  /v2/subscriptions/{device-id}/{resourcePath}:
    put:
      summary: Subscribe to a resource path.
      description: |-
        The Device Management Connect eventing model consists of observable Resources.

        This means that endpoints can deliver updated resource content, periodically or with a more sophisticated solution-dependent logic. The OMA LwM2M resource model also supports including objects, object instances, resources, and resource instances.

        Applications can subscribe to objects, object instances or individual resources to make the device provide value change notifications to Device Management Connect service. An application needs to call a `/notification/callback` method to get Device Management Connect to push notifications of the resource changes.

        **Notification rules**

        A web application can place dynamic observation rules for individual Object Instances and Resources to define when the device sends observations. More information in [Notification rules](https://www.pelion.com/docs/device-management/current/resources/resource-change-webapp.html).

        All manual subscriptions are removed during a full device registration, at which point applications must re-subscribe. To avoid this, you can use `/subscriptions` to set a pre-subscription.

        **Example:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v2/subscriptions/{device-id}/{resourcePath} \
        -H 'Authorization: Bearer <api_key>'
        ```
      operationId: addResourceSubscription
      produces:
        - application/json
      parameters:
        - name: device-id
          in: path
          description: |-
            A unique Device Management device ID for the endpoint. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
        - name: resourcePath
          in: path
          description: The resource URL.
          required: true
          type: string
      tags:
        - Subscriptions
      responses:
        200:
          description: Successfully subscribed.
        202:
          description: Accepted. Returns an asynchronous response ID used to reference the future asynchronous response.
          schema:
            $ref: '#/definitions/AsyncID'
        400:
          description: Bad request, malformed content.
        404:
          description: Endpoint or its resource not found.
        429:
          description: 'Cannot accept the request at the moment: the queue is full.'
        502:
          description: 'Subscription failed: endpoint not connected.'

    delete:
      summary: Remove a subscription.
      description: |-
        Remove an existing subscription from a resource path.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v2/subscriptions/{device-id}/{resourcePath} \
        -H 'Authorization: Bearer <api_key>'
        ```
      operationId: deleteResourceSubscription
      parameters:
        - name: device-id
          in: path
          description: |-
            A unique Device Management device ID for the endpoint. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
        - name: resourcePath
          in: path
          description: |-
            The resource URL.
          required: true
          type: string
      tags:
        - Subscriptions
      responses:
        204:
          description: Successfully removed subscription.

    get:
      summary: Read subscription status
      operationId: checkResourceSubscription
      parameters:
        - name: device-id
          in: path
          description: |-
            A unique Device Management device ID for the endpoint. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
        - name: resourcePath
          in: path
          description: |-
            The resource URL.
          required: true
          type: string
      tags:
        - Subscriptions
      responses:
        200:
          description: Resource is subscribed.
        404:
          description: Resource is not subscribed.

  /v2/subscriptions/{device-id}:
    get:
      summary: Read endpoints subscriptions
      description: |-
        Lists all subscribed resources from a single endpoint.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v2/subscriptions/{device-id} \
        -H 'Authorization: Bearer <api_key>'
        ```
      operationId: getEndpointSubscriptions
      produces:
        - text/uri-list
      parameters:
        - name: device-id
          in: path
          description: |-
            A unique Device Management device ID for the endpoint. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
      tags:
        - Subscriptions
      responses:
        200:
          description: List of subscribed resources.
          schema:
            type: string
            description: "A list of resource URIs, one per line."
            example: "/sen/light"
        404:
          description: Endpoint not found, or there are no subscriptions for that endpoint.
    delete:
      summary: Delete subscriptions from an endpoint.
      description: |-
        Deletes all resource subscriptions in a single endpoint.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v2/subscriptions/{device-id} \
        -H 'Authorization: Bearer <api_key>'
        ```
      operationId: deleteEndpointSubscriptions
      parameters:
        - name: device-id
          in: path
          description: |-
            A unique Device Management device ID for the endpoint. The ID must be an exact match. Do not use wildcards.
          required: true
          type: string
      tags:
        - Subscriptions
      responses:
        204:
          description: Successfully removed.

  /v2/subscriptions:
    delete:
      summary: Remove pre-subscriptions.
      description: |-
        Removes pre-subscriptions.

        **Example:**
        ```
        curl -X DELETE https://api.us-east-1.mbedcloud.com/v2/subscriptions \
        -H 'Authorization: Bearer <api_key>'
        ```
      operationId: deletePreSubscriptions
      tags:
        - Subscriptions
      responses:
        204:
          description: Successfully removed subscriptions.
        401:
          description: Unauthorized.
        403:
          description: 'Forbidden: the authorization token used is not an API key.'
    put:
      summary: Set pre-subscriptions
      description: |-
        Pre-subscription is a set of rules and patterns established by the application. When an endpoint registers and its ID, type, and registered resources match the pre-subscription data, Device Management Connect automatically sends subscription requests to the device. The pattern may include the endpoint ID (optionally having an `*` character at the end), endpoint type, a list of resources, or expressions with an `*` character at the end. Subscriptions based on pre-subscriptions are done when device registers or does a register update. To remove the pre-subscription data, put an empty array as a rule.

        **Note:** The subscription is bound to the API key your application is using. To get notifications of the resource value changes, you need to create an [event notification channel](https://www.pelion.com/docs/device-management/current/integrate-web-app/event-notification.html) with the same API Key.

        For more information, see [Subscribing to Resource changes from a web application](https://www.pelion.com/docs/device-management/current/resources/resource-change-webapp.html).

        **Notification rules**

        A web application can place dynamic observation rules for individual Object Instances and Resources to define when the device sends observations. More information in [Notification rules](https://www.pelion.com/docs/device-management/current/resources/resource-change-webapp.html).

        **Limits**:

        - The maximum length of the endpoint name and endpoint type is 64 characters.
        - The maximum length of the resource path is 128 characters.
        - You can listen to 256 separate resource paths.
        - The maximum number of pre-subscription entries is 1024.

        **Example request:**
        ```
        curl -X PUT https://api.us-east-1.mbedcloud.com/v2/subscriptions \
        -H 'Authorization: Bearer <api_key>' \
        -H 'content-type: application/json' \
        -d '[
               {
                 "endpoint-name": "node-001",
                 "resource-path": ["/dev"]
               },
               {
                 "endpoint-type": "Light",
                 "resource-path": ["/sen/*"]
               },
               {
                 "endpoint-name": "node*"
               },
               {
                 "endpoint-type": "Sensor"
               },
               {
                 "resource-path": ["/dev/temp","/dev/hum"]
               }
            ]'
        ```

        - Subscribe to `/dev` resource of endpoint named `node-001`.
        - Subscribe to `Light` type of endpoints and their resources prefixed with `/sen/`.
        - Subscribe to all observable resources of endpoint names prefixed with `node`.
        - Subscribe to all observable resources of `Sensor` type endpoints.
        - Subscribe to `/dev/temp` and `/dev/hum` resources of all endpoints.

        **Note**:
        To save bandwidth and avoid unnecessary traffic, use resource path patterns to limit the matching resources in the presubscription data.
        This prevents the notification flow from unwanted resources to your web application. See [Subscribe only to what you need](https://www.pelion.com/docs/device-management/current/resources/resource-change-webapp.html).

      operationId: updatePreSubscriptions
      consumes:
        - application/json
      tags:
        - Subscriptions
      produces:
        - text/plain
      parameters:
        - name: presubscription
          in: body
          description: Array of pre-subscriptions.
          required: true
          schema:
            $ref: '#/definitions/PresubscriptionArray'
      responses:
        204:
          description: Successfully created.
        400:
          description: Bad request, malformed content.
        401:
          description: Unauthorized.
        403:
          description: 'Forbidden: the authorization token used is not an API key.'
    get:
      summary: Get pre-subscriptions.
      description: |-
        Retrieve pre-subscription data. The server returns a JSON structure. If there are no pre-subscribed resources, it returns an empty array.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v2/subscriptions \
        -H 'Authorization: Bearer <api_key>'
        ```
      operationId: getPreSubscriptions
      produces:
        - application/json
      tags:
        - Subscriptions
      responses:
        200:
          description: OK.
          schema:
            $ref: '#/definitions/PresubscriptionArray'
        401:
          description: Unauthorized.
        403:
          description: 'Forbidden: the authorization token used is not an API key.'

  /v2/device-requests/{device-id}:
    post:
      summary: Send an async request to device
      description: |
        This API provides an interface to asynchronously call methods on a device.

        The `async-id` is provided by the REST client, enabling the REST client to track the end-to-end flow with an
        identifier relevant to the end application. It can be, for example, a UUID or the web application's session ID
        along with the device ID and the resource. This also prevents any race conditions with
        [the notification channel](https://www.pelion.com/docs/device-management/current/integrate-web-app/event-notification.html). All responses are sent through the
        currently configured notification channel as an
        [AsyncIDResponse](https://www.pelion.com/docs/device-management-api/connect/).

        For `GET` methods, values may be fetched from an internal cache, instead of contacting the device.

        **Example**: Read the value of Resource "/3200/0/5501". If the value is not in the cache, the read command will
        go all the way to the device.
        ```
        curl -X POST https://api.us-east-1.mbedcloud.com/v2/device-requests/{device_id}?async-id={async-response-id} \
        -H 'Authorization: Bearer {api_key}' \
        -H 'content-type: application/json' \
        -d '{"method": "GET", "uri": "/3200/0/5501"}'
        ```

        The server puts the requests in a queue if it cannot reach the device at the time of the request. The queue
        is limited to 20 requests.
        The queueing behavior is affected by the `retry` and the `expiry-seconds` parameters. If the device
        is not reached, or the device fails to respond when the request is made, the server queues the request
        and retries the delivery within the given expiry period the next time the device contacts the server.
        The requests from the queue are delivered in the order of insertion, one at a time, and not concurrently.

        A delivery attempt follows the protocol-specific retransmission logic. Depending on the protocol, there
        can be multiple transmissions. For CoAP, the retransmissions have an exponential backoff
        of 2, 4, 8, 16, and up to 64 seconds, taking in total over 2 minutes.
        If the device does not respond within this two-minute period, the delivery fails, one `retry` is used, and
        the request is put back into the queue so long as the retry count is less than its maximum.

        For a queue-mode device, the request delivery is not attempted immediately, but only when the device next time
        contacts the server.

        If retries are exhausted or the expiry time has passed, then the server discards the request and sends an error
        in [AsyncIDResponse](https://www.pelion.com/docs/device-management-api/connect/). The retries
        could be exhausted, for example, if the device periodically contacts
        the server and receives the request from the queue, but then fails to respond back to the server.

        On the other hand, the device may lose its network connectivity, and the requests in the queue may expire
        and get discarded before the device regains connectivity. If the request was delivered to the device,
        the status code in `AsyncIDResponse` is *2xx* or *4xx*, as responded by the device. If the request could not be
        delivered, the status code generated by the server is *429* or *5xx*.

        You can write [Notification Rules](https://www.pelion.com/docs/device-management/current/resources/resource-change-webapp.html) for a
        resource with PUT command. Please see example of the payload below.
        ```
        { "method": "PUT", "uri": "/5/0/1?lt=10&gt=60&pmax=120" }
        ```

        POST `method` can be used to either execute or create resource on a LWM2M supporting device. When creating
        a resource, `uri` must refer to an object, and `payload-b64` must be in LWM2M TLV format, as in
        the following example.
        ```
        { "method": "POST", "uri": "/123", "content-type": "application/vnd.oma.lwm2m+tlv", "payload-b64": "BwHFAnZhbHVl" }
        ```

        ```
        Example URIs:
        POST /v2/device-requests/015f2fa34d310000000000010030036c?async-id=123e4567-e89b-12d3-a456-426655440000
        POST /v2/device-requests/015f2fa34d310000000000010030036c?async-id=123e4567-e89b-12d3-a456-426655440000&retry=2&expiry-seconds=7200

        Example payload to read value from resource /5/0/1:
        { "method": "GET", "uri": "/5/0/1" }

        Example payload to set notification rules for resource /5/0/1:
        { "method": "PUT", "uri": "/5/0/1?lt=10&gt=60&pmax=120" }

        Example payload to write value "value1" to resource /5/0/1:
        { "method": "PUT", "uri": "/5/0/1?k1=v1&k2=v2", "accept": "text/plain", "content-type": "text/plain", "payload-b64": "dmFsdWUxCg==" }

        Example payload to execute LWM2M resource /123/1/1:
        { "method": "POST", "uri": "/123/1/1" }

        Immediate response:
        202 Accepted

        Examples of AsyncIDResponse, delivered via the notification channel:
        { "async-responses": [ { "id": "123e4567-e89b-12d3-a456-426655440000", "status": 200, "payload": "dmFsdWUxCg==", "ct": "text/plain", "max-age": 600 } ] }
        { "async-responses": [ { "id": "123e4567-e89b-12d3-a456-426655440000", "status": 504, "error": "TIMEOUT" } ] }
        ```
      operationId: createAsyncRequest
      consumes:
        - application/json
      tags:
        - DeviceRequests
      produces:
        - application/json
      parameters:
        - name: "device-id"
          in: "path"
          description: 'The device ID generated by Device Management.'
          required: true
          format: "uuid, 32 hexadecimal characters"
          type: string
        - name: "async-id"
          in: "query"
          description: 'The client-generated ID for matching the correct response delivered by notification.'
          required: true
          format: '1-40 alphanumeric characters and dashes.'
          type: string
          pattern: '^[\w\-]{1,40}$'
        - name: "retry"
          in: "query"
          description: "The number of attempts to deliver the request to the device after the first delivery attempt.
          For example, two retries sums up to the total of three delivery attempts. If retries are exhausted,
          the request is discarded and an error is delivered in the AsyncIDResponse. The default number of retries for
          a non-queue mode device is `0`. The default number of retries for a queue-mode device is `2`."
          required: false
          type: integer
          minimum: 0
          maximum: 10
        - name: "expiry-seconds"
          in: "query"
          description: "The time period during which the delivery is attempted, in seconds. If the device is not
          reachable within this period, the request is discarded and an error is delivered in the AsyncIDResponse.
          The default time period during which the delivery is attempted is two hours for a non-queue mode device and three days for
          a queue-mode device."
          required: false
          type: integer
          minimum: 60
          maximum: 2592000
        - name: body
          in: body
          description: Device request to send.
          required: true
          schema:
            $ref: '#/definitions/DeviceRequest'
      responses:
        202:
          description: Accepted.
        400:
          description: |-
            Bad request. Contains one of the errors RESOURCE_NOT_FOUND, DEVICE_NOT_CONNECTED, MALFORMED_JSON_CONTENT,
            MALFORMED_ASYNC_ID and QUEUE_IS_FULL
          schema:
            type: "string"
        401:
          description: Authentication failure.
        404:
          description: |-
            Contains one of the following errors:
            <table>
              <thead>
                <tr>
                  <th>Error message</th>
                  <th>Description</th>
                </tr>
              </thead>
              <tbody>
                <tr>
                  <td><b>DEVICE_NOT_FOUND</b></td>
                  <td>The device is not in the device registry. It has either requested for register delete
                  or it has not connected in time and is expired.</td>
                </tr>
                <tr>
                  <td><b>URI_PATH_DOES_NOT_EXISTS</b></td>
                  <td>The device does not have requested resource. Check the resource path is correct.</td>
                </tr>
              </tbody>
            </table>
          schema:
            type: "string"

  /v3/devices/{device-id}/echo:
    get:
      summary: Get the Device Echo object.
      description: |-
        Read the Device Echo object. It represents the last known state of the device. The state contains the resources and their reported values with the desired state of the device.
        Auto-observable and subscribed resources are stored as the reported state of the device. To change the desired state, issue write commands with `/v2/device-requests/{device-id}`.

        **Example:**
        ```
        curl -X GET https://api.us-east-1.mbedcloud.com/v3/devices/{device-id}/echo -H 'Authorization: Bearer <api_key>'
        ```
      operationId: getDeviceEchoObject
      tags:
        - Device Echo
      produces:
        - application/json
      parameters:
        - name: device-id
          in: path
          description: The device ID generated by Device Management.
          required: true
          format: UUID, 32 hexadecimal characters
          type: string
      responses:
        200:
          description: Device found and returned.
          schema:
            $ref: '#/definitions/EchoDevice'
        401:
          description: Authentication failure.
        404:
          description: Device not found from Device Echo.

definitions:
  Resource:
    type: object
    required:
      - uri
    properties:
      uri:
        type: string
        description: The resource URL.
        example: "/sen/light"
      rt:
        type: string
        description: |-
          Application-specific resource type that describes this resource. It is created by the [client side application](https://www.pelion.com/docs/device-management/current/resources/resource-setup-in-device-management-client.html). Not meant to be a human-readable name for the resource. Multiple resource types may be included, separated by a space.
        example: "light_sensor"
      obs:
        type: boolean
        description: |-
          'Determines whether you can subscribe to changes for this resource. It can have values `true` or `false`.'
        example: true
      type:
        type: string
        description: |-
          The content type of the resource.

          We recommend you use the **resource types** listed in the [LwM2M specification](http://technical.openmobilealliance.org/Technical/technical-information/omna/lightweight-m2m-lwm2m-object-registry).
        example: "text/plain"

  ResourceArray:
    type: array
    items:
      $ref: '#/definitions/Resource'

  AsyncID:
    type: object
    properties:
      async-response-id:
        type: string
        description: Asynchronous response unique ID.
        example: "9e3c96b8-c4d7-496a-ab90-cc732b9b560e"

  Presubscription:
    type: object
    properties:
      endpoint-name:
        type: string
        description: Device Management device ID.
        example: "015f3850a657000000000001001002ab"
      endpoint-type:
        type: string
        example: "Light"
      resource-path:
        type: array
        minItems: 1
        items:
          type: string
          description: 'A resource URI.'
          example: "/sen/light"

  PresubscriptionArray:
    type: array
    items:
      $ref: '#/definitions/Presubscription'

  ResourcePath:
    type: string
    description: 'A resource URI.'
    example: "/sen/light"

  SubscriptionsList:
    type: string
    description: 'A list of resource URIs, one per line.'
    example: "/sen/light"

  DeviceRequest:
    type: object
    required:
      - method
      - uri
    properties:
      method:
        type: string
        description: 'The CoAP request method. Allowed values are GET, POST, PUT and DELETE.'
        example: "GET"
      uri:
        type: string
        description: The URI path of the requested resource.
        example: "/5/0/1"
      accept:
        type: string
        description: The content type of an accepted response.
        example: "text/plain"
      content-type:
        type: string
        description: The content type of the payload.
        example: "text/plain"
      payload-b64:
        type: string
        description: The base64 encoded payload to send to the device.
        example: "dmFsdWUxCg=="

  AsyncIDResponse:
    type: object
    properties:
      id:
        type: string
        description: The unique ID of the asynchronous response.
        example: "9e3c96b8-c4d7-496a-ab90-cc732b9b560e"
      status:
        type: integer
        example: 200
        description: |

          States whether sending a command to the device succeeded or failed.

          <table>
            <thead>
              <tr>
                <th>Code</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><b>200</b></td>
                <td>Operation succeeded. The payload contains result of the operation from the device.</td>
              </tr>
              <tr>
                <td><b>400</b></td>
                <td>The device rejected the request, possibly because it does not support the request method.
                See how the supported methods are
                [configured for the device resources](https://www.pelion.com/docs/device-management/current/resources/index.html).</td>
              </tr>
              <tr>
                <td><b>404</b></td>
                <td>The device replied that it does not have the requested resource.</td>
              </tr>
              <tr>
                <td><b>412</b></td>
                <td>Precondition failed and the operation was not executed. The device responded with 4.12 CoAP
                response code. The device may reject a subscription request with this response code.</td>
              </tr>
              <tr>
                <td><b>413</b></td>
                <td>Request entity is too large and could not be delivered to the device.</td>
              </tr>
              <tr>
                <td><b>415</b></td>
                <td>The device does not support the media type in the request.</td>
              </tr>
              <tr>
                <td><b>429</b></td>
                <td>An expired request was removed from queue (REQUEST_EXPIRED),
                the device requested deregistration (DEVICE_REMOVED_REGISTRATION),
                or the device was suspended (DEVICE_BLOCKED). The request was never delivered to the device.</td>
              </tr>
              <tr>
                <td><b>502</b></td>
                <td>The request to the device failed and the retry count was exceeded.
                The last retry failed to establish TCP or TLS connection to the device.</td>
              </tr>
              <tr>
                <td><b>503</b></td>
                <td>The request to the device failed and the retry count was exceeded.
                The last retry failed because the device is currently unavailable (NOT_CONNECTED).</td>
              </tr>
              <tr>
                <td><b>504</b></td>
                <td>The request to the device failed and the retry count was exceeded.
                The last retry failed because the device did not respond in time according to the protocol-specific
                retransmission logic (TIMEOUT).</td>
              </tr>
            </tbody>
          </table>
      error:
        type: string
        description: |
          An optional error message describing the error. Please refer to status listing above.
        example: "TIMEOUT"
      payload:
        type: string
        description: Requested data, base64 encoded.
        example: "My4zMQ=="
      ct:
        type: string
        description: The content type.
        example: "text/plain"
      max-age:
        type: string
        description: 'Determines how long this value stays valid in the cache, in seconds. 0 means that the value is not stored in the cache.'
        example: 60

  EchoDevice:
    type: object
    required:
      - id
    description: The Device Echo object representing the device.
    properties:
      object:
        type: string
        description: API Resource name
        example: device-echo
      device_id:
        type: string
        description: The device ID.
        example: 015f3850a657000000000001001002ab
      endpoint_name:
        type: string
        description: The endpoint name.
        example: Sensor3222454
      updated_at:
        type: string
        format: date-time
        description: The time of last registration event of a Device Echo object.
        example: 2019-10-20T10:30:55.123Z
      created_at:
        type: string
        format: date-time
        description: Response creation UTC time.
        example: 2020-10-20T10:30:55.123Z
      last_desired_at:
        type: string
        format: date-time
        description: The last time a write command was initiated on a resource.
        example: 2019-10-20T10:30:55.123Z
      last_reported_at:
        type: string
        format: date-time
        description: The last time any resource's reported value was updated.
        example: 2019-10-20T10:30:55.123Z
      resources:
        type: array
        description: The list of device resources stored in Device Echo.
        items:
          $ref: '#/definitions/EchoResource'

  EchoResource:
    type: object
    description: The representation of a single resource of the device stored in Device Echo.
    properties:
      resource_path:
        type: string
        description: The path of the resource.
        example: /3/0/1
      subscribed:
        type: boolean
        description: System-level subscription status of the resource. If any of the applications has placed a subscription, the status is true. Overlapping subscriptions from multiple applications do not increase the load on the device as the server handles the multiplexing.
      desired:
        type: object
        description: Resource value written, or queued to be written to the device.
        items:
          $ref: '#/definitions/EchoResourceDesired'
      reported:
        type: object
        description: Reported resource data from the device.
        items:
          $ref: '#/definitions/EchoResourceReported'

  EchoResourceDesired:
    type: object
    description: Resource value written, or queued to be written to the device.
    properties:
      value:
        type: string
        format: byte
        description: The desired value in base64 encoded format.
        example: RGVzaXJlZCB2YWx1ZS4=
      desired_at:
        type: string
        format: date-time
        description: The time of the latest value write was initiated.
        example: 2019-10-20T10:30:55.123Z
      status_updated_at:
        type: string
        format: date-time
        description: The time of the last status update.
        example: 2019-10-20T10:30:55.123Z
      status:
        type: number
        format: integer
        description: The status of the desired value. 0 = 'pending write', 1 = 'success', 2 = 'failed'.

  EchoResourceReported:
    type: object
    description: Reported single resource data received from the device.
    properties:
      value:
        type: string
        format: byte
        description: The reported value in base64 encoded format.
        example: UmVwb3J0ZWQgdmFsdWUu
      reported_at:
        type: string
        format: date-time
        description: The time the last value was reported.
      expires_at:
        type: string
        format: date-time
        description: The time after which the reported value is not valid, calculated based on the max-age of the resource value the device reported.
        example: 2019-10-20T10:30:55.123Z
      content_type:
        type: string
        description: Content type of the reported resource value.
        example: text/plain
